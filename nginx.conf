# Nginx configuration for Kirsten & Dale Wedding Photo Share
# Optimized for performance and security

user wedding;
worker_processes auto;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Buffer settings for better performance
    client_max_body_size 20M;
    client_body_buffer_size 128k;
    client_header_buffer_size 3m;
    large_client_header_buffers 4 256k;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=general:10m rate=100r/m;

    # Wedding Photo Share Server
    server {
        listen 3001 default_server;
        listen [::]:3001 default_server;

        server_name photos.jagdevops.co.za;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https://res.cloudinary.com https://api.cloudinary.com; connect-src 'self' https://api.cloudinary.com; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com;" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Custom headers for wedding app
        add_header X-Wedding-App "Kirsten-Dale-2024" always;
        add_header X-Powered-By "Love" always;

        # Rate limiting for general requests
        limit_req zone=general burst=20 nodelay;

        # Main application - SPA routing
        location / {
            try_files $uri $uri/ /index.html;

            # Cache control for HTML files
            location ~* \.html$ {
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
            }
        }

        # Static assets with aggressive caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";

            # Optional: Add CORS headers for font files
            location ~* \.(woff|woff2|ttf|eot)$ {
                add_header Access-Control-Allow-Origin "*";
            }
        }

        # Wedding assets with medium caching
        location /wedding-assets/ {
            expires 1w;
            add_header Cache-Control "public";
        }

        # API routes (if any backend endpoints are added later)
        location /api/ {
            limit_req zone=api burst=10 nodelay;

            # Add CORS headers for API
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 200;
            }

            # Proxy to backend if needed (currently not used)
            # proxy_pass http://localhost:3001;
            return 404;
        }

        # Upload endpoint rate limiting (for future backend integration)
        location /upload {
            limit_req zone=upload burst=5 nodelay;
            try_files $uri $uri/ /index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "Wedding Photo Share is running!\n";
            add_header Content-Type text/plain;
        }

        # Robots.txt for SEO
        location /robots.txt {
            return 200 "User-agent: *\nDisallow: /admin\nAllow: /\n";
            add_header Content-Type text/plain;
        }

        # Security - deny access to sensitive files
        location ~ /\. {
            deny all;
        }

        location ~ ^/(package\.json|yarn\.lock|package-lock\.json|tsconfig\.json|\.env|\.git) {
            deny all;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Wedding-specific redirects (if needed)
        location /gallery {
            try_files $uri $uri/ /index.html;
        }

        location /admin {
            try_files $uri $uri/ /index.html;
            # Additional security for admin routes
            limit_req zone=api burst=5 nodelay;
        }
    }

    # Redirect HTTP to HTTPS (for production with SSL)
    server {
        listen 80;
        listen [::]:80;
        server_name photos.jagdevops.co.za;

        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server configuration (uncomment when SSL is set up)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name photos.jagdevops.co.za;
    #
    #     # SSL configuration
    #     ssl_certificate /etc/nginx/ssl/fullchain.pem;
    #     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
    #     ssl_session_timeout 1d;
    #     ssl_session_cache shared:SSL:50m;
    #     ssl_session_tickets off;
    #
    #     # Modern SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # OCSP stapling
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    #
    #     # Include the same location blocks as above
    #     # ... (copy from the HTTP server block)
    # }
}